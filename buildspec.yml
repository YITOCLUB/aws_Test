version: 0.2
## CodePipelineとCodeBuildのCI/CDでGitHubからECSへデプロイする
## https://zoo200.net/deploy-ecs-with-cicd-codepipeline-codebuild/#toc12
phases:


  install:
    runtime-versions:
      ####docker: 18

      ###https://github.com/aws/aws-codebuild-docker-images/issues/531

      docker: 20

  pre_build:
    commands:
      - echo "●●●YI　Dockerイメージのビルド前ーーーーーーーーーーーーーー"   
      - echo 00000YITO Logging in to Amazon ECR...

      # 環境変数の設定
      #$$$$- AWS_ACCOUNT_ID=12346789012

      - ECR_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      ##$$- REPOSITORY_URI=$ECR_URI/$IMAGE_REPO_NAME:$IMAGE_TAG
      - REPOSITORY_URI=$ECR_URI/$IMAGE_REPO_NAME

      - CONTAINER_NAME=container-testa001

       # コミットハッシュの先頭7桁をタグに利用する
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}

      - echo "★★★★★★★IMAGE_TAG :" ${IMAGE_TAG}


      ##mod20221124
      ###- $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
      ###- $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      ###- aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin <Account ID>.dkr.ecr.ap-northeast-1.amazonaws.com

      ##01- aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      ##02- $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
      ####/codebuild/output/tmp/script.sh: 4: aws: not found

      ##03 https://ijianhuang.wordpress.com/2021/09/18/fixed-a-strange-error-script-sh-4-login-not-found-in-aws-codebuild/

      ##04 OKKK
      ###- aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 234944522256.dkr.ecr.ap-northeast-1.amazonaws.com
      #$$- aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com


      ##05
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URI


  build:
    commands:
      - echo "●●●YI　DockerイメージのビルドーーーーーーーーーーIMAGE_REPO_NAME：" $IMAGE_REPO_NAME  
      - echo Build started on `date`
      - echo "★★★★★★★ls -l yml :" `ls -l ./docker-compose_aws.yml`
      - echo "★★★★★★★docker -v :" `docker -v`
      - echo "★★★★★★★docker-compose -v :" `docker-compose -v`
      ###- docker-compose -f ./docker-compose.yml build --no-cache webapp

      ##$$$- docker-compose -f ./docker-compose_aws.yml build --no-cache

      - docker-compose -f ./docker-compose_aws.yml build --no-cache

      - echo "★★★★★★★docker images :" `docker images`
      
      ###- docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}


      ##$$- docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

      ##$$- docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI
      - docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG
      
      ###ない？- echo "□□□□docker image ls :" `docker image ls`
      - echo "★★★★★★★docker images :" `docker images`

  post_build:
    commands:
      - echo "●●●YI　Dockerイメージのビルド後ーーーーーーーーーーーーーー"   
      - echo Build completed on `date`
      - echo Pushing the Docker image...

      #$$- docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      ##$$- docker push $REPOSITORY_URI
      
      #$$- docker push $REPOSITORY_URI:latest

      - docker push $REPOSITORY_URI
      - docker push $REPOSITORY_URI:$IMAGE_TAG

      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

      - echo "★★★★★★★ls -l imagedefinitions.json :" `ls -l ./imagedefinitions.json`
